// Chem 274B: Software Engineering Fundamentals for
//            Molecular Sciences 
// Creator: Dr.  Tony Drummond
// Date Created: 9/01/2022
// Last revisited: 9/20/2023
//
//  myrandom.h contains the necessary include files and 
//             API declarations thatsupport our C++ functions
//             that generate random numbers
// List of External Library API Files
#pragma once    // Ensures that this file is only included once
                // during compilation

#include <ctime>    // A call to the system time() to init
                    // the seed of the random number generator
#include <iostream>
#include <sstream>  // String streams are included here
#include <iomanip> 
#include <math.h>

using namespace std;

// LIST OF FLAGS AND SYMBOLS:
// Predefined value for seed of the C pseudo random 
// number generator.  
#define FIXED_RSEED  123

// Possible integer values for random_type, which 
// sets or resets the C pseudo random number generator
// if random_type=1, uses FIXED_RSEED to set the rseed
// if random_type=2, uses the system time to randomly set
//                   rseed
#define GEN_FIXED_RSEED    1
#define GEN_NEW_RSEED      2

// LIST OF FUNCTIONS AND AVAILABLE FUNCTIONALITIES:
// function: set_rseed sets the seed of C pseudo random number 
//           geneator.
//    input: random_type is the type of value to use to set
//           the random key (types are defined in myrandom.h)
//   output: no output 
//   When a invalid random_type is passed, it returns error -4
int set_rseed( int random_type );

// function: fill_array_randkeys fills an integer array with 
//           random keys. The random seed is set elsewhere or
//           uses the default system seed.
//    input: A is an array of type int
//           n is the number of elements (keys) in A
//   output: A contains n random numbers generated by calls to srand()
int fill_array_randkeys(int *A, int n);

// function: fill_array_samekey fills an integer array with the same key value
//    input: A is an array of type int
//           n is the number of elements (keys) in A
//           key is the key value to duplicate everywhere in A
//   output: All elements in A contain the key value
int fill_array_samekey(int *A, int n, int key);

// function: fill_random_vals fills an integer array with  
//           random values between v1 and v2.
//    input: An array where the values will be returned.
//           n is the number of values in A
//           v1 and v2 are the min and max values to generate
//   output: A will be filled with random values
int fill_random_vals(int *A, int n, int v1, int v2);

// function: get_randmmdd generates a random pair of month and day
//    input: <no inputs>
//   output: returns in month the randomly generated month
//           returns in day the randomly generated day
void get_randmmdd(int *month, int *day);

// function: formatted_date generates a string with a formatted date
//    input: year: integer representing the date's year 
//           month: integer representing the date's month (1 - 12)
//           day: integer representing the date's day (1-31)
//   output: formatted string of the input date
string formatted_date(int year, int month, int day);

// function: rand_dates generates n random dates for years  
//           between year1 and year2
//    input: rtype: random generation type can used a fixed
//           seed (GEN_FIXED_RSEED) or start with a random 
//           seed (GEN_NEW_RSEED)
//           year1: is the 1st year to consider for the random dates
//           year2: is the end year to consider for the random dates
//           n    : number of dates to generate
//           dates: array of strings where the dates should be 
//                  returned (should be allocated by the caller)
//   output: dates: is an array of 8-character strings containing dates
int rand_dates( int rtype, int year1, int year2, int n, string *dates );

// function: append_uids generates n unique IDs to the 
//           end of every string in an array of size n
//    input: strings : is an array of n strings
//           n: is the size of the strings 
//   output: the strings in the original have a unique tag at the end 
int append_uids( string *strings, int n );

// The following are error return by some of the random number 
// generator functions
#define RAND_NO_ERR 0        // random function succesfully executed.
#define RAND_ERR_SEEDTYPE -1 // unknown seed type
#define RAND_INVALID_PTR -2  // Invalid array pointer for keys
#define RAND_INVALID_RANGE -3  // Invalid random numbers range sent 
#define RAND_INVALID_SZ -4     // Invalid array size (n<1)

