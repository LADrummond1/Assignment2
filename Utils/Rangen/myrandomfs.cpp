// Chem 274B: Software Engineering Fundamentals for
//            Molecular Sciences 
// Creator: Dr.  Tony Drummond
// Date Created: 9/01/2022
// Last revisited: 9/20/2023
//
//  C++ functions that generate a random key or 
//  of keys random arrays. The keys are all of type int in C++

#include "myrandom.h"

// function: set_rseed sets the seed of C pseudo random number 
//           geneator.
//    input: random_type is the type of value to use to set
//           the random key (types are defined in myrandom.h)
//   output: no output 
//          returns RAND_ERR_SEEDTYPE if seed type is not defined
//          returns RAND_NO_ERR if successfully sets the random seed
int set_rseed( int random_type ){
    if (random_type == GEN_FIXED_RSEED)   //rseed = FIXED_RSEED
        srand(FIXED_RSEED);
    else if (random_type == GEN_NEW_RSEED) // rseed = random value
        srand(time(NULL));
    else {
        return (RAND_ERR_SEEDTYPE);   // Invalid RANDOM seed type sent
    }
    return (RAND_NO_ERR);
}


// function: fill_array_randkeys fills an integer array with 
//           random keys. The random seed is set elsewhere or
//           uses the default system seed.
//    input: A is an array of type int
//           n is the number of elements (keys) in A
//   output: A contains n random numbers generated by calls to srand()
//          returns RAND_NO_ERR if successfully fills arrays of keys
int fill_array_randkeys(int *A, int n){
    int i;
    
    for(i=0; i<n; i++)
        A[i] = rand()% n*10;  // % is the mod function which ensures that we
		                      // only generate integers x, where 0 ≤ x ≤ n
    return (RAND_NO_ERR);
}

// function: fill_array_samekey fills an integer array with the same key value
//    input: A is an array of type int
//           n is the number of elements (keys) in A
//           key is the key value to store everywhere in the array A
//   output: All elements in A contain the key
//          returns RAND_NO_ERR successfully fills arrays with same key
int fill_array_samekey(int *A, int n, int key){
    int i;
    for (i = 0; i < n; i++)
        A[i] = key;
    return (RAND_NO_ERR);
}

// function: fill_random_vals fills an integer array with  
//           random values between v1 and v2.
//    input: An array where the values will be returned.
//           n is the number of values in A
//           v1 and v2 are the min and max values to generate
//   output: A will be filled with random values
//          returns RAND_NO_ERR successfully fills arrays with keys
int fill_random_vals(int *A, int n, int v1, int v2){
    int i, range;

    range = v2 - v1;
    for (i = 0; i < n; i++)
        A[i] = (rand()%range)+v1;
    return (RAND_NO_ERR);
}
